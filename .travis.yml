language: c++
sudo: required
dist: trusty
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.8
    packages:
      - g++-5
      - clang-3.8
      - binutils

matrix:
  include:
    # Linux GCC Builds
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Release' SANITIZER=""
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Coverage' SANITIZER=""
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER=""
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="address"
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold -pie" BUILD_TYPE='Debug' SANITIZER="thread"
    #- env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="memory"
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 COMPILER_ID=gcc ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="undefined"
 
    # Linux Clang Builds
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Release' SANITIZER=""
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER=""
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="address"
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="thread"
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="memory"
    - env: C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8 COMPILER_ID=clang ADDITIONAL_FLAGS="-fuse-ld=gold" BUILD_TYPE='Debug' SANITIZER="undefined"

    # OSX Clang Builds
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Release' SANITIZER=""
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Debug' SANITIZER=""
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Debug' SANITIZER="address"
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Debug' SANITIZER="thread"
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Debug' SANITIZER="memory"
    - os: osx
      osx_image: xcode8
      env: C_COMPILER=clang CXX_COMPILER='clang++' COMPILER_ID=clang ADDITIONAL_FLAGS="" BUILD_TYPE='Debug' SANITIZER="undefined"

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      echo
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      # Seems already installed now
      # brew install cmake
      cmake --version
    fi

before_script:
  - export CC=${C_COMPILER}
  - export CXX=${CXX_COMPILER}
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p Build
  - cd Build
  - cmake --version
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${ADDITIONAL_FLAGS}" -DPROJECT_BUILD_SANITIZER_TYPE=${SANITIZER}

script:
  - make -j2
  - ctest -V
  - ./bin/runcppproject

after_success:
  - |
    if [[ "${BUILD_TYPE}" == "Coverage" ]]; then
      bash <(curl -s https://codecov.io/bash)
    fi
